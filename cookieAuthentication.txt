







COOKIE BASED AUTHENTICATION 





THERE ARE VARIOUS STEPS WHICH ARE INCLUDED IN THIS PROCESS : 


STEP 1 - WHEN YOU LOGIN INTO YOUR BANK ACCOUNT , YOU NEED TO ENTER YOUR EMAIL , PASSWORD .

STEP 2 - THE INFORMATION WILL BE SENT TO THE SERVER VIA A POST REQUEST AND THE SERVER WILL THE  VERIFY THE INFORMATION BY COMPARING IT FROM THE DATABASE 

STEP 3 - ONCE THE INFORMATION IS MATCHED THE SERVER WILL CREATE A SESSION FOR YOU AND STORE IT IN THE DATABSE AND GIVE THE SESSION ID TO THE CLIENT VIA A COOKIE 

STEP 4 - NOW THE USER CAN ACCESS VARIUOUS RESOURCE ON THE WEBSITE USING THAT SESSION ID . BUT THE SESSIONS HAVE EXPIRATION TIME ONCE THE SESSION IS EXPIRED THE 
         
         SESSION IS REMOVED FROM THE DB AND SESSION ID IS OF NO USE . SO THE USER NEED TO RE-LOGIN TO THE APPLICATION 


IMP NOTE ==> THE SESSION ID ARE STORED IN A COOKIE AND THE COOKIES ARE AUTOMATICALLY SENT VIA HTTP HEADER .

LIMITATION OF COOKIE BASED AUTHENTICATION 

A cookie-based authentication system typically stores a session ID in a cookie on the client-side. This session ID is used to
 associate the user with their authentication information on the server. If an attacker is able to steal the session ID from the
 cookie, they can use it to access the website on behalf of the original user. This would allow the attacker to perform actions on the
 website as if they were the legitimate user, potentially compromising sensitive information or causing harm to the user's account.




TOKEN BASED AUTHENTICATION 


Step 1 - WHEN YOU Logib Into Your Bank Account , You need to enter your email , password . 

Step 2 -  The servers verifies the information by comparing the information with the database , 

          once the information is verified the server sends the token to the client 



SO WHAT EXACTLY DOES THE TOKESN CONSISTS OF ==> 


      THE TOKENS ARE CONSISTS OF 3 THINGS 

        HEADER ==> WHICH BASICALLY INVOLVED SOME KINDA ALGORITHM 

        PAYLOAD ==> SOME BASIC USER INFORMATION AND EXPIRATION TIME OF THE TOKEN 
      
       SIGNATURE ==> THIS HELPS IN VERIFYING THE TOKEN WHICH IS RECIVED ONCE THE CLIENT SEND IT VIA 
                     SOME KINDA REQUEST TO THE ORIGINAL TOKEN WHICH THE SERVER SENT 




THE ADVANTAGE OF THIS TYPE OF AUTHENTICATION IS THAT THE INFORMATION IS NOT STORED IN THE SERVER UNLIKE COOKIE BASED AUTHENTICATION 

SO THE QUESTION ARISES EXACTLY HOW DOES THE SERVER GET TO KNOW THAT THE TOKEN IS ORIGINAL ,
 
THE ANSWER TO THIS IS THAT THE TOKEN HAS HEADER AND PAYLOADS WHICH CAN BE COMBINED TO FORM A SECRET KEY , SO THE TOKEN WHICH IS RECIEVED BY CLIENT ALSO HAS SECRET KEY 

SO IF THE SECRET KEY IS MATCHED BY THE SECRET KEY WHICH IS FORMED BY THE SERVER , THE USER WILL BE AUTHORIZED . 






If you're building your own authentication system, it's a really good idea to include a flag in your payloads, to indicate whether that token was generated by authenticating with user credentials, or by using a refresh token. You can use this flag to authorize sensitive operations, such as changing your password or making payments - so if the user didn't log in recently, you can prompt them to log in again for sensitive operations. I would say this is a must for most applications.



 
